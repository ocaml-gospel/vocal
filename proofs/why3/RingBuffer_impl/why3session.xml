<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.3.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Z3" version="4.8.6" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="RingBuffer_impl.mlw"/>
<theory name="Impl" proved="true">
 <goal name="buffer&#39;vc" expl="VC for buffer" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="71"/></proof>
 </goal>
 <goal name="create&#39;vc" expl="VC for create" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="113"/></proof>
 </goal>
 <goal name="length&#39;vc" expl="VC for length" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="8"/></proof>
 </goal>
 <goal name="clear&#39;vc" expl="VC for clear" proved="true">
 <proof prover="0"><result status="valid" time="0.27" steps="1249"/></proof>
 </goal>
 <goal name="push&#39;vc" expl="VC for push" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="push&#39;vc.0" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="92"/></proof>
  </goal>
  <goal name="push&#39;vc.1" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="129"/></proof>
  </goal>
  <goal name="push&#39;vc.2" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="34"/></proof>
  </goal>
  <goal name="push&#39;vc.3" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="140"/></proof>
  </goal>
  <goal name="push&#39;vc.4" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="104"/></proof>
  </goal>
  <goal name="push&#39;vc.5" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="191"/></proof>
  </goal>
  <goal name="push&#39;vc.6" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.04" steps="93"/></proof>
  </goal>
  <goal name="push&#39;vc.7" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="42"/></proof>
  </goal>
  <goal name="push&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="48"/></proof>
  </goal>
  <goal name="push&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="50"/></proof>
  </goal>
  <goal name="push&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="2"><result status="valid" time="0.15" steps="337380"/></proof>
  </goal>
  <goal name="push&#39;vc.11" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="push&#39;vc.11.0" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.04" steps="178"/></proof>
   </goal>
   <goal name="push&#39;vc.11.1" expl="type invariant" proved="true">
   <proof prover="0"><result status="valid" time="0.39" steps="984"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="push&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="46"/></proof>
  </goal>
  <goal name="push&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="47"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="peek&#39;vc" expl="VC for peek" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="78"/></proof>
 </goal>
 <goal name="pop&#39;vc" expl="VC for pop" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="pop&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="24"/></proof>
  </goal>
  <goal name="pop&#39;vc.1" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="25"/></proof>
  </goal>
  <goal name="pop&#39;vc.2" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="24"/></proof>
  </goal>
  <goal name="pop&#39;vc.3" expl="index in array bounds" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="27"/></proof>
  </goal>
  <goal name="pop&#39;vc.4" expl="integer overflow" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="96"/></proof>
  </goal>
  <goal name="pop&#39;vc.5" expl="assertion" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pop&#39;vc.5.0" expl="assertion" proved="true">
   <proof prover="0"><result status="valid" time="0.08" steps="399"/></proof>
   </goal>
   <goal name="pop&#39;vc.5.1" expl="VC for pop" proved="true">
   <proof prover="0"><result status="valid" time="0.01" steps="27"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="pop&#39;vc.6" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="72"/></proof>
  </goal>
  <goal name="pop&#39;vc.7" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="38"/></proof>
  </goal>
  <goal name="pop&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="41"/></proof>
  </goal>
  <goal name="pop&#39;vc.9" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="138"/></proof>
  </goal>
  <goal name="pop&#39;vc.10" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.15" steps="332"/></proof>
  </goal>
  <goal name="pop&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="134"/></proof>
  </goal>
  <goal name="pop&#39;vc.12" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="46"/></proof>
  </goal>
  <goal name="pop&#39;vc.13" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="49"/></proof>
  </goal>
  <goal name="pop&#39;vc.14" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="49"/></proof>
  </goal>
  <goal name="pop&#39;vc.15" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="73"/></proof>
  </goal>
  <goal name="pop&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="77"/></proof>
  </goal>
  <goal name="pop&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="44"/></proof>
  </goal>
  <goal name="pop&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.05" steps="146"/></proof>
  </goal>
  <goal name="pop&#39;vc.19" expl="type invariant" proved="true">
  <proof prover="0"><result status="valid" time="0.38" steps="1086"/></proof>
  </goal>
  <goal name="pop&#39;vc.20" expl="type invariant" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="pop&#39;vc.20.0" expl="type invariant" proved="true">
   <transf name="replace" proved="true" arg1="(int63&#39;int b_first + i)" arg2="(int63&#39;int (first b1) + (i+1))">
    <goal name="pop&#39;vc.20.0.0" expl="type invariant" proved="true">
    <proof prover="0"><result status="valid" time="0.03" steps="179"/></proof>
    </goal>
    <goal name="pop&#39;vc.20.0.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="0.01" steps="41"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="pop&#39;vc.20.1" expl="type invariant" proved="true">
   <transf name="replace" proved="true" arg1="(int63&#39;int b_first + i)" arg2="(int63&#39;int (first b1) + (i+1))">
    <goal name="pop&#39;vc.20.1.0" expl="type invariant" proved="true">
    <proof prover="0"><result status="valid" time="0.16" steps="499"/></proof>
    </goal>
    <goal name="pop&#39;vc.20.1.1" expl="equality hypothesis" proved="true">
    <proof prover="0"><result status="valid" time="0.02" steps="41"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="pop&#39;vc.21" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="46"/></proof>
  </goal>
  <goal name="pop&#39;vc.22" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.02" steps="49"/></proof>
  </goal>
  <goal name="pop&#39;vc.23" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="49"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="get&#39;vc" expl="VC for get" proved="true">
 <proof prover="0"><result status="valid" time="0.41" steps="1051"/></proof>
 </goal>
 <goal name="copy&#39;vc" expl="VC for copy" proved="true">
 <proof prover="0"><result status="valid" time="0.39" steps="1819"/></proof>
 </goal>
</theory>
<theory name="Correct" proved="true">
 <goal name="snoc_append" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="79"/></proof>
 </goal>
 <goal name="cons_dot_dot_one" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="82"/></proof>
 </goal>
 <goal name="Sig.buffer&#39;vc" expl="VC for buffer" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="31"/></proof>
 </goal>
 <goal name="Sig.create&#39;vc" expl="VC for create" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="16"/></proof>
 </goal>
 <goal name="Sig.length&#39;vc" expl="VC for length" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="26"/></proof>
 </goal>
 <goal name="Sig.clear&#39;vc" expl="VC for clear" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="48"/></proof>
 </goal>
 <goal name="Sig.push&#39;vc" expl="VC for push" proved="true">
 <proof prover="0"><result status="valid" time="0.06" steps="179"/></proof>
 </goal>
 <goal name="Sig.peek&#39;vc" expl="VC for peek" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="28"/></proof>
 </goal>
 <goal name="Sig.pop&#39;vc" expl="VC for pop" proved="true">
 <proof prover="0"><result status="valid" time="0.08" steps="235"/></proof>
 </goal>
 <goal name="Sig.get&#39;vc" expl="VC for get" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="30"/></proof>
 </goal>
 <goal name="Sig.copy&#39;vc" expl="VC for copy" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="117"/></proof>
 </goal>
</theory>
</file>
</why3session>
