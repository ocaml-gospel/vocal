<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.3.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC4" version="1.5" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="CVC4" version="1.7" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="4" name="Z3" version="4.5.0" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="Vector_impl.mlw"/>
<theory name="Impl" proved="true">
 <goal name="t&#39;vc" expl="VC for t" proved="true">
 <proof prover="1"><result status="valid" time="0.07" steps="19342"/></proof>
 </goal>
 <goal name="create&#39;vc" expl="VC for create" proved="true">
 <proof prover="1"><result status="valid" time="0.13" steps="23596"/></proof>
 </goal>
 <goal name="make&#39;vc" expl="VC for make" proved="true">
 <proof prover="1"><result status="valid" time="0.15" steps="25034"/></proof>
 </goal>
 <goal name="init&#39;vc" expl="VC for init" proved="true">
 <proof prover="1"><result status="valid" time="0.25" steps="49383"/></proof>
 </goal>
 <goal name="length&#39;vc" expl="VC for length" proved="true">
 <proof prover="1"><result status="valid" time="0.05" steps="12942"/></proof>
 </goal>
 <goal name="get&#39;vc" expl="VC for get" proved="true">
 <proof prover="1"><result status="valid" time="0.12" steps="19518"/></proof>
 </goal>
 <goal name="set&#39;vc" expl="VC for set" proved="true">
 <proof prover="1"><result status="valid" time="0.16" steps="25956"/></proof>
 </goal>
 <goal name="unsafe_resize&#39;vc" expl="VC for unsafe_resize" proved="true">
 <proof prover="4"><result status="valid" time="0.44" steps="692778"/></proof>
 </goal>
 <goal name="resize&#39;vc" expl="VC for resize" proved="true">
 <proof prover="1"><result status="valid" time="0.07" steps="13837"/></proof>
 </goal>
 <goal name="clear&#39;vc" expl="VC for clear" proved="true">
 <proof prover="1"><result status="valid" time="0.09" steps="18484"/></proof>
 </goal>
 <goal name="is_empty&#39;vc" expl="VC for is_empty" proved="true">
 <proof prover="1"><result status="valid" time="0.08" steps="14688"/></proof>
 </goal>
 <goal name="sub&#39;vc" expl="VC for sub" proved="true">
 <proof prover="1"><result status="valid" time="0.14" steps="25648"/></proof>
 </goal>
 <goal name="fill&#39;vc" expl="VC for fill" proved="true">
 <proof prover="1"><result status="valid" time="0.17" steps="27085"/></proof>
 </goal>
 <goal name="blit&#39;vc" expl="VC for blit" proved="true">
 <proof prover="1"><result status="valid" time="0.22" steps="31435"/></proof>
 </goal>
 <goal name="append&#39;vc" expl="VC for append" proved="true">
 <proof prover="1"><result status="valid" time="0.18" steps="27308"/></proof>
 </goal>
 <goal name="merge_right&#39;vc" expl="VC for merge_right" proved="true">
 <proof prover="1"><result status="valid" time="0.20" steps="29326"/></proof>
 </goal>
 <goal name="copy&#39;vc" expl="VC for copy" proved="true">
 <proof prover="1"><result status="valid" time="0.14" steps="23019"/></proof>
 </goal>
 <goal name="push&#39;vc" expl="VC for push" proved="true">
 <proof prover="1"><result status="valid" time="0.25" steps="33082"/></proof>
 </goal>
 <goal name="pop&#39;vc" expl="VC for pop" proved="true">
 <proof prover="1"><result status="valid" time="0.14" steps="25098"/></proof>
 </goal>
 <goal name="pop_opt&#39;vc" expl="VC for pop_opt" proved="true">
 <proof prover="1"><result status="valid" time="0.17" steps="25098"/></proof>
 </goal>
 <goal name="top&#39;vc" expl="VC for top" proved="true">
 <proof prover="1"><result status="valid" time="0.18" steps="23711"/></proof>
 </goal>
 <goal name="top_opt&#39;vc" expl="VC for top_opt" proved="true">
 <proof prover="1"><result status="valid" time="0.15" steps="24507"/></proof>
 </goal>
 <goal name="fold_left&#39;vc" expl="VC for fold_left" proved="true">
 <transf name="split_all_full" proved="true" >
  <goal name="fold_left&#39;vc.0" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.11" steps="17988"/></proof>
  </goal>
  <goal name="fold_left&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.22" steps="29363"/></proof>
  </goal>
  <goal name="fold_left&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.10" steps="19471"/></proof>
  </goal>
  <goal name="fold_left&#39;vc.3" expl="loop invariant preservation" proved="true">
  <transf name="introduce_premises" proved="true" >
   <goal name="fold_left&#39;vc.3.0" expl="loop invariant preservation" proved="true">
   <proof prover="4" timelimit="5"><result status="valid" time="0.74" steps="1063025"/></proof>
   <transf name="remove" proved="true" arg1="real,bool,string,tuple0,unit,ref,map,list,option,zero,one,( * ),(&gt;),(&gt;=),abs,min,max,div,mod,get,set,([]),([&lt;-]),is_nil,length,mem,is_none,nth,(++),int63&#39;maxInt,int63&#39;minInt,min_int63,max_int63,to_int,in_bounds,max_int,min_int,(!),empty,set1,([&lt;-]&#39;),singleton,snoc,([.._]),(++&#39;),fold_right,elts,length1,max_array_length,a_view,a_data,a_size,a_dummy,Assoc,Unit_def_l,Unit_def_r,Inv_def_l,Inv_def_r,Comm,Assoc1,Mul_distr_l,Mul_distr_r,Comm1,Unitary,NonTrivialRing,Refl,Trans,Antisymm,Total,ZeroLessOne,CompatOrderAdd,CompatOrderMult,Abs_pos,Min_r,Max_l,Min_comm,Max_comm,Min_assoc,Max_assoc,Div_mod,Div_sign_pos,Div_sign_neg,Mod_sign_pos,Mod_sign_neg,Rounds_toward_zero,Div_1,Mod_1,Div_inf,Mod_inf,Div_mult,Mod_mult,Length_nonnegative,Append_assoc,Append_l_nil,Append_length,mem_decomp,to_int_in_bounds,extensionality,max_int&#39;def,min_int&#39;def,length_nonnegative,empty&#39;def,set&#39;def,([&lt;-])&#39;def,([.._])&#39;def,fold_left_app,fold_right_ext,fold_right_snoc,non_neg_max_array_length,Abs_le,Abs_le1,Abs_le2,Div_bound,Div_bound1,Mod_bound,Mod_bound1,(==)&#39;spec,(==)&#39;spec2,(==)&#39;spec3,set&#39;spec,set&#39;spec1,set&#39;spec2,singleton&#39;spec,singleton&#39;spec1,cons&#39;spec,cons&#39;spec1,cons&#39;spec2,snoc&#39;spec,snoc&#39;spec1,snoc&#39;spec2,([..])&#39;spec,([..])&#39;spec1,(++)&#39;spec,(++)&#39;spec1,(++)&#39;spec2,array&#39;invariant,array&#39;invariant1,fold_left&#39;def,fold_left&#39;def1,fold_right&#39;def,fold_right&#39;def1,is_nil&#39;spec,is_nil&#39;spec1,Length_nil,Length_nil1,is_none&#39;spec,is_none&#39;spec1,mem_append,mem_append1,mem_append2,t&#39;invariant,t&#39;invariant1,t&#39;invariant2,t&#39;invariant3,t&#39;invariant4,H2,H3,H4,H5,H6">
    <goal name="fold_left&#39;vc.3.0.0" expl="loop invariant preservation" proved="true">
    <proof prover="0" timelimit="5"><result status="valid" time="0.03" steps="95"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="fold_left&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.14" steps="21636"/></proof>
  </goal>
  <goal name="fold_left&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.10" steps="19837"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="fold_right&#39;vc" expl="VC for fold_right" proved="true">
 <transf name="split_all_full" proved="true" >
  <goal name="fold_right&#39;vc.0" expl="integer overflow" proved="true">
  <proof prover="1"><result status="valid" time="0.08" steps="17988"/></proof>
  </goal>
  <goal name="fold_right&#39;vc.1" expl="loop invariant init" proved="true">
  <proof prover="1"><result status="valid" time="0.34" steps="42904"/></proof>
  </goal>
  <goal name="fold_right&#39;vc.2" expl="precondition" proved="true">
  <proof prover="1"><result status="valid" time="0.10" steps="20306"/></proof>
  </goal>
  <goal name="fold_right&#39;vc.3" expl="loop invariant preservation" proved="true">
  <proof prover="4"><result status="valid" time="0.65" steps="877954"/></proof>
  </goal>
  <goal name="fold_right&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.15" steps="22350"/></proof>
  </goal>
  <goal name="fold_right&#39;vc.5" expl="postcondition" proved="true">
  <proof prover="1"><result status="valid" time="0.12" steps="20589"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="map&#39;vc" expl="VC for map" proved="true">
 <proof prover="1"><result status="valid" time="0.53" steps="75015"/></proof>
 </goal>
 <goal name="mapi&#39;vc" expl="VC for mapi" proved="true">
 <proof prover="4"><result status="valid" time="0.50" steps="689024"/></proof>
 </goal>
</theory>
<theory name="Correct" proved="true">
 <goal name="Sig.t&#39;vc" expl="VC for t" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="12"/></proof>
 </goal>
 <goal name="Sig.create&#39;refn&#39;vc" expl="VC for create&#39;refn" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="141"/></proof>
 </goal>
 <goal name="Sig.make&#39;refn&#39;vc" expl="VC for make&#39;refn" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="80"/></proof>
 </goal>
 <goal name="Sig.init&#39;refn&#39;vc" expl="VC for init&#39;refn" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="71"/></proof>
 </goal>
 <goal name="Sig.unsafe_resize&#39;refn&#39;vc" expl="VC for unsafe_resize&#39;refn" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="126"/></proof>
 </goal>
 <goal name="Sig.resize&#39;refn&#39;vc" expl="VC for resize&#39;refn" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="110"/></proof>
 </goal>
 <goal name="Sig.clear&#39;refn&#39;vc" expl="VC for clear&#39;refn" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="32"/></proof>
 </goal>
 <goal name="Sig.is_empty&#39;refn&#39;vc" expl="VC for is_empty&#39;refn" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="38"/></proof>
 </goal>
 <goal name="Sig.length&#39;refn&#39;vc" expl="VC for length&#39;refn" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="20"/></proof>
 </goal>
 <goal name="Sig.get&#39;refn&#39;vc" expl="VC for get&#39;refn" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="24"/></proof>
 </goal>
 <goal name="Sig.set&#39;refn&#39;vc" expl="VC for set&#39;refn" proved="true">
 <proof prover="0"><result status="valid" time="0.07" steps="179"/></proof>
 </goal>
 <goal name="Sig.sub&#39;refn&#39;vc" expl="VC for sub&#39;refn" proved="true">
 <proof prover="0"><result status="valid" time="0.04" steps="144"/></proof>
 </goal>
 <goal name="Sig.fill&#39;refn&#39;vc" expl="VC for fill&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.22"/></proof>
 </goal>
 <goal name="Sig.blit&#39;refn&#39;vc" expl="VC for blit&#39;refn" proved="true">
 <proof prover="2"><result status="valid" time="0.22"/></proof>
 </goal>
 <goal name="Sig.append&#39;refn&#39;vc" expl="VC for append&#39;refn" proved="true">
 <proof prover="0"><result status="valid" time="0.06" steps="213"/></proof>
 </goal>
 <goal name="Sig.merge_right&#39;refn&#39;vc" expl="VC for merge_right&#39;refn" proved="true">
 <proof prover="0"><result status="valid" time="0.10" steps="276"/></proof>
 </goal>
 <goal name="Sig.map&#39;refn&#39;vc" expl="VC for map&#39;refn" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="87"/></proof>
 </goal>
 <goal name="Sig.mapi&#39;refn&#39;vc" expl="VC for mapi&#39;refn" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="87"/></proof>
 </goal>
 <goal name="Sig.copy&#39;refn&#39;vc" expl="VC for copy&#39;refn" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="87"/></proof>
 </goal>
 <goal name="Sig.fold_left&#39;refn&#39;vc" expl="VC for fold_left&#39;refn" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="10"/></proof>
 </goal>
 <goal name="Sig.fold_right&#39;refn&#39;vc" expl="VC for fold_right&#39;refn" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="10"/></proof>
 </goal>
 <goal name="Sig.push&#39;refn&#39;vc" expl="VC for push&#39;refn" proved="true">
 <proof prover="0"><result status="valid" time="0.05" steps="169"/></proof>
 </goal>
 <goal name="Sig.pop&#39;refn&#39;vc" expl="VC for pop&#39;refn" proved="true">
 <proof prover="0"><result status="valid" time="0.04" steps="191"/></proof>
 </goal>
 <goal name="Sig.pop_opt&#39;refn&#39;vc" expl="VC for pop_opt&#39;refn" proved="true">
 <proof prover="0"><result status="valid" time="0.06" steps="228"/></proof>
 </goal>
 <goal name="Sig.top&#39;refn&#39;vc" expl="VC for top&#39;refn" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="39"/></proof>
 </goal>
 <goal name="Sig.top_opt&#39;refn&#39;vc" expl="VC for top_opt&#39;refn" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="123"/></proof>
 </goal>
</theory>
</file>
</why3session>
