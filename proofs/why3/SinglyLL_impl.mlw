(**************************************************************************)
(*                                                                        *)
(*  VOCaL -- A Verified OCaml Library                                     *)
(*                                                                        *)
(*  Copyright (c) 2018 The VOCaL Project                                  *)
(*                                                                        *)
(*  This software is free software, distributed under the MIT license     *)
(*  (as described in file LICENSE enclosed).                              *)
(**************************************************************************)

(** Singly-linked lists *)

module Mem

  use map.Map
  use map.Const
  use option.Option

  (* memory model *)

  type loc 'a

  val constant null : loc 'a

  val (==) (x y: loc 'a) : bool
    ensures { result <-> x=y }

  type mem [@ocaml:remove] 'a = private {
    mutable  contents: loc 'a -> option 'a;
    mutable      next: loc 'a -> option (loc 'a);
    (* allocated cells are those for which next is Some _ *)
  } invariant {
    forall l. contents l = None <-> next l = None
  } by { contents = (fun _ -> None); next = (fun _ -> None); }

  val ghost constant empty_memory () : mem 'a
    ensures { result.next = const None }

  function map_option_union (m1 m2: 'a -> option 'b) : 'a -> option 'b =
    fun x -> if m1 x = None then m2 x else m1 x

  val ghost mem_union (m1 m2: mem 'a) : mem 'a
    ensures { result.contents = map_option_union m1.contents m2.contents }
    ensures { result.next     = map_option_union m1.next     m2.next }

  predicate disjoint_map (m1 m2: 'a -> option 'b) =
    forall l: 'a. m1 l = None \/ m2 l = None

  predicate disjoint_mem (m1 m2: mem 'a) =
    disjoint_map m1.contents m2.contents /\
    disjoint_map m1.next     m2.next

  val mk_cell (ghost mem: mem 'a) (v: 'a) (c: loc 'a) : loc 'a
    writes  { mem.contents, mem.next }
    ensures { result <> null }
    ensures { (old mem).next result = None }
    ensures { mem.next = Map.set (old mem.next) result (Some c) }
    ensures { mem.contents = Map.set (old mem.contents) result (Some v) }

  val function get_next (ghost mem: mem 'a) (l: loc 'a) : loc 'a
    requires { l <> null }
    requires { mem.next l <> None }
    ensures  { Some result = mem.next l }

  val set_next (ghost mem: mem 'a) (l1 l2: loc 'a)  : unit
    requires { l1 <> null }
    requires { mem.next l1 <> None }
    writes   { mem.next }
    ensures  { mem.next = Map.set (old mem.next) l1 (Some l2) }

  val function get_content (ghost mem: mem 'a) (l: loc 'a) :  'a
    requires { l <> null }
    requires { mem.next l <> None }
    ensures  { Some result = mem.contents l }

  val ghost free (ghost mem: mem 'a) (l: loc 'a) : unit
    requires { l <> null }
    requires { mem.contents l <> None }
    writes   { mem }
    ensures  { mem.contents = Map.set (old mem.contents) l None }
    ensures  { mem.next     = Map.set (old mem.next    ) l None }

end

(* module CursorLL *)

(*   use import seq.Seq *)
(*   use import int.Int *)
(*   use import Mem *)

(*   type cursor 'a = { *)
(*     ghost mutable visited    : seq 'a; *)
(*     ghost         collection : seq 'a; *)
(*           mutable list       : loc 'a; *)
(*   } invariant { exists m: mem 'a. is_list m *)

(*   predicate prefix (s1 s2: seq 'a) = *)
(*     Seq.length s1 <= Seq.length s2 /\ *)
(*     forall i. 0 <= i < length s1 -> s1[i] = s2[i] *)

(*   lemma prefix_refl: forall s: seq 'a. prefix s s *)

(*   lemma prefix_trans: forall s1 s2 s3: seq 'a. *)
(*     prefix s1 s2 -> prefix s2 s3 -> prefix s1 s3 *)

(*   lemma prefix_anti_sym: forall s1 s2: seq 'a. *)
(*     prefix s1 s2 -> prefix s2 s1 -> s1 == s2 *)

(*   lemma prefix_same_length : forall s1 s2: seq 'a. *)
(*     prefix s1 s2 -> Seq.length s1 = Seq.length s2 -> s1 == s2 *)

(*   predicate permitted (c: cursor 'a) = *)
(*     prefix c.visited c.collection *)

(*   predicate complete (c: cursor 'a) = *)
(*     length c.visited = length c.collection *)

(*   val create (l: loc 'a) : cursor 'a *)
(*     ensures { permitted result } *)
(*     ensures { result.visited = empty } *)
(*     (\* ensures { result.collection = *\) *)

(* end *)