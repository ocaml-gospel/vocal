(**************************************************************************)
(*                                                                        *)
(*  VOCaL -- A Verified OCaml Library                                     *)
(*                                                                        *)
(*  Copyright (c) 2018 The VOCaL Project                                  *)
(*                                                                        *)
(*  This software is free software, distributed under the MIT license     *)
(*  (as described in file LICENSE enclosed).                              *)
(**************************************************************************)

(* Author: Mário Pereira (LRI, Univ Paris-Saclay then
                          NOVA-LINCS, Universidade Nova de Lisboa) *)

(** Pairing heaps (M. Fredman, R. Sedgewick, D. Sleator, R. Tarjan, 1986).

    Purely applicative implementation, following Okasaki's implementation
    in his book "Purely Functional Data Structures" (Section 5.5).
*)

module Impl

  use list.List
  use list.Length
  use int.Int
  use mach.int.Int63
  use bag.Bag

  scope Make
    clone import gospel.Comparable as X with axiom is_pre_order

    type elt = t

    type tree = E | T elt (list tree)
    (* [e] is no greater than the root of [h], if any *)
    predicate le_root_heap (e: elt) (h: tree) = match h with
      | E -> true
      | T x _ -> X.le e x
      end

    (* [e] is no greater than the roots of the trees in [l] *)
    predicate le_roots_list (e: elt) (l: list tree) = match l with
      | Nil -> true
      | Cons h r -> le_root_heap e h && le_roots_list e r
      end

    lemma le_roots_trans:
      forall x y l. X.le x y -> le_roots_list y l -> le_roots_list x l

    predicate heap (h: tree) = match h with
      | E -> true
      | T x l -> le_roots_list x l && heap_list l
      end
    with heap_list (l: list tree) = match l with
      | Nil -> true
      | Cons h r -> heap h && heap_list r
      end

    predicate no_middle_empty_heap (h: tree) = match h with
      | E -> true
      | T _ l -> no_middle_empty_heap_list l
      end
    with no_middle_empty_heap_list (l: list tree) = match l with
      | Nil -> true
      | Cons h r ->
          h <> E && no_middle_empty_heap h && no_middle_empty_heap_list r
      end

    predicate inv_heap (h: tree) = heap h && no_middle_empty_heap h

    function size_heap (h: tree) : int = match h with
      | E -> 0
      | T _ l -> 1 + size_heap_list l
      end
    with size_heap_list (l: list tree) : int = match l with
      | Nil -> 0
      | Cons h r -> size_heap h + size_heap_list r
      end

    let rec lemma size_heap_nonneg (h: tree)
      ensures { size_heap h >= 0 }
      variant { h }
    = match h with
      | E -> ()
      | T _ l -> size_heap_list_nonneg l
      end
    with lemma size_heap_list_nonneg (l: list tree)
      ensures { size_heap_list l >= 0 }
      variant { l }
    = match l with
      | Nil -> ()
      | Cons h r ->
         size_heap_nonneg h; size_heap_list_nonneg r
      end

    let lemma size_empty (h: tree)
      ensures { size_heap h = 0 <-> h = E }
    = match h with
      | E -> ()
      | T _ l ->
        size_heap_list_nonneg l
      end

    function occ_heap (x: elt) (h: tree) : int = match h with
      | E -> 0
      | T e l -> (if x = e then 1 else 0) + occ_heap_list x l
      end
    with occ_heap_list (x: elt) (l: list tree) : int = match l with
      | Nil -> 0
      | Cons h r -> occ_heap x h + occ_heap_list x r
      end

    let rec lemma occ_heap_nonneg (x: elt) (h: tree)
      ensures { occ_heap x h >= 0 }
      variant { h }
    = match h with
      | E -> ()
      | T _ l -> occ_heap_list_nonneg x l
      end
    with lemma occ_heap_list_nonneg (x: elt) (l: list tree)
      ensures { occ_heap_list x l >= 0 }
      variant { l }
    = match l with
      | Nil -> ()
      | Cons h r ->
         occ_heap_nonneg x h; occ_heap_list_nonneg x r
      end

    predicate mem_heap (x: elt) (h: tree) =
      0 < occ_heap x h

    predicate mem_heap_list (x: elt) (l: list tree) =
      0 < occ_heap_list x l

    let rec lemma mem_heap (h: tree)
      requires { heap h }
      variant  { h }
      ensures  { forall x.
                   le_root_heap x h -> forall y. mem_heap y h -> X.le x y }
    = match h with
      | E -> ()
      | T _ l -> mem_heap_list l
      end
    with lemma mem_heap_list (l: list tree)
      requires { heap_list l }
      variant  { l }
      ensures  { forall x. le_roots_list x l ->
                  forall y. mem_heap_list y l -> X.le x y }
    = match l with
      | Nil -> ()
      | Cons h r ->
         mem_heap h;
         mem_heap_list r
      end

    predicate is_minimum_heap (x: elt) (h: tree) =
      mem_heap x h && forall e. mem_heap e h -> X.le x e

    function minimum_heap tree : elt
    axiom minimum_heap_def: forall x l. minimum_heap (T x l) = x

    let lemma root_is_minimum_heap (h: tree)
      requires { 0 < size_heap h }
      requires { heap h }
      ensures  { is_minimum_heap (minimum_heap h) h }
    = match h with
      | E -> absurd
      | T x l -> occ_heap_list_nonneg x l
      end

    type t = { data: tree; ghost bag: bag elt; }
      invariant { inv_heap data }
      invariant { forall x. nb_occ x bag = occ_heap x data }
      invariant { card bag = size_heap data }

    function size (t: t) : int = size_heap t.data

    lemma size_nonneg : forall t. size t >= 0

    predicate le_root (e: elt) (t: t) = le_root_heap e t.data

    lemma le_root_heap_trans:
      forall x y h. X.le x y -> le_root_heap y h -> le_root_heap x h

    lemma le_root_trans:
      forall x y t. X.le x y -> le_root y t -> le_root x t

    function occ (x: elt) (t: t) : int = occ_heap x t.data

    lemma occ_nonneg : forall x t. occ x t >= 0

    predicate mem (x: elt) (t: t) =
      0 < occ x t

    lemma mem_t : forall t. heap t.data ->
      forall x. le_root x t -> forall y. mem y t -> X.le x y

    predicate is_minimum (x: elt) (t: t) = is_minimum_heap x t.data

    function minimum (t: t) : elt = minimum_heap t.data

    lemma root_is_minimum : forall t. 0 < size t -> heap t.data ->
      is_minimum (minimum t) t

    let empty () : t
      ensures { size result = 0 }
      ensures { forall e. not (mem e result) }
    = { data = E; bag = empty_bag }

    let is_empty (t: t) : bool
      ensures  { result <-> size t = 0 }
    = match t.data with E -> true | T _ _ -> false end

    let find_min (t: t) : elt
      requires { 0 < size t }
      ensures  { result = minimum t }
    = match t.data with
      | E -> absurd
      | T x _ -> x
      end

    let merge_heap (h1 h2: tree) : tree
      requires { inv_heap h1 && inv_heap h2 }
      ensures  { inv_heap result }
      ensures  { size_heap result = size_heap h1 + size_heap h2 }
      ensures  { forall x. occ_heap x result = occ_heap x h1 + occ_heap x h2 }
    = match h1, h2 with
      | E, h | h, E -> h
      | T x1 l1, T x2 l2 ->
         if X.compare x1 x2 <= zero then T x1 (Cons h2 l1)
         else T x2 (Cons h1 l2)
      end

    let merge (t1 t2: t): t
      ensures  { size result = size t1 + size t2 }
      ensures  { forall x. occ x result = occ x t1 + occ x t2 }
    = { data = merge_heap t1.data t2.data; bag = union t1.bag t2.bag }

    let insert (x: elt) (t: t) : t
      ensures  { size result = size t + 1 }
      ensures  { occ x result = occ x t + 1 }
      ensures  { forall y. x <> y -> occ y result = occ y t }
    = let h_x = {data = T x Nil; bag = singleton x} in merge h_x t

    let rec merge_pairs_heap (l: list tree) : tree
      requires { heap_list l && no_middle_empty_heap_list l }
      variant  { length l }
      ensures  { inv_heap result }
      ensures  { size_heap result = size_heap_list l }
      ensures  { forall x. occ_heap x result = occ_heap_list x l }
    = match l with
      | Nil                 -> E
      | Cons h Nil          -> h
      | Cons h1 (Cons h2 r) ->
          merge_heap (merge_heap h1 h2) (merge_pairs_heap r)
      end

    let delete_min (t: t) : t
      requires { 0 < size t }
      ensures  { occ (minimum t) result = occ (minimum t) t - 1 }
      ensures  { forall y. y <> minimum t -> occ y result = occ y t }
      ensures  { size result = size t - 1 }
    = match t.data with
      | E -> absurd
      | T (ghost x) l ->
          { data = merge_pairs_heap l; bag = diff t.bag (singleton x) }
      end

  end

end

module Correct

  use Impl as PH

  clone PairingHeap.Sig with (* Make = PH.Make *)
    lemma Make.X.is_pre_order,
    type Make.X.t = PH.Make.X.t,
    function Make.X.cmp = PH.Make.X.cmp,
    val  Make.X.compare = PH.Make.X.compare,
    type Make.t = PH.Make.t,
    function Make.minimum = PH.Make.minimum,
    lemma Make.min_def,
    val Make.empty = PH.Make.empty,
    val Make.is_empty = PH.Make.is_empty,
    val Make.find_min = PH.Make.find_min,
    val Make.delete_min = PH.Make.delete_min,
    val Make.insert = PH.Make.insert,
    val Make.merge = PH.Make.merge

end

(* A simple client that uses a heap to find the minimum of three integers *)

module CompareInt

  use int.Int
  use mach.int.Int63

  function cmp : int -> int -> int63
  axiom cmp_def: forall x y: int.
   cmp x y = if x < y then -1 else if x = y then zero else one

  let compare (x y: int) : int63
    ensures { result = cmp x y }
  = if x < y then of_int (-1) else if x = y then zero else one

end

module Client

  use int.Int
  use CompareInt

  clone PairingHeap.Sig with (* Make.X = CompareInt *)
    type Make.X.t = int,
    function Make.X.cmp = cmp,
    goal Make.X.is_pre_order,
    axiom Make.min_def,
    val Make.X.compare = compare
  import Make

  let min3 (x y z: int) : int
    ensures { result =  x \/ result =  y \/ result =  z }
    ensures { result <= x /\ result <= y /\ result <= z }
  = let h = empty () in
    let h = insert x h in
    let h = insert y h in
    let h = insert z h in
    find_min h

end

module PHint

  use CompareInt

  clone Impl with (* Make.X = CompareInt *)
    type Make.X.t = int,
    function Make.X.cmp = cmp,
    val Make.X.compare = compare,
    goal Make.X.is_pre_order,
    axiom Make.minimum_heap_def

end

module Main

  use PHint as PH

  clone Client with (* Sig = PH.Impl *)
    type Sig.Make.t = PH.Impl.Make.t,
    function Sig.Make.minimum = PH.Impl.Make.minimum,
    goal Sig.Make.min_def,
    val Sig.Make.empty = PH.Impl.Make.empty,
    val Sig.Make.is_empty = PH.Impl.Make.is_empty,
    val Sig.Make.find_min = PH.Impl.Make.find_min,
    val Sig.Make.delete_min = PH.Impl.Make.delete_min,
    val Sig.Make.insert = PH.Impl.Make.insert,
    val Sig.Make.merge = PH.Impl.Make.merge

end
