(**************************************************************************)
(*                                                                        *)
(*  VOCaL -- A Verified OCaml Library                                     *)
(*                                                                        *)
(*  Copyright (c) 2018 The VOCaL Project                                  *)
(*                                                                        *)
(*  This software is free software, distributed under the MIT license     *)
(*  (as described in file LICENSE enclosed).                              *)
(**************************************************************************)

(* Author: Jean-Christophe Filliâtre (CNRS, LRI, Univ Paris-Saclay) *)

module Impl

  use int.Int
  use int.NumOf
  use mach.int.Int63
  use mach.int.Refint63
  use string.OCaml
  use ocaml.Exceptions
  use seq.Seq
  use mach.array.Array63

  type candidate [@ocaml:remove] = string

  (* the number of elements a[i] equal to c with lo <= i < hi *)
  function num (a: seq candidate) (c: candidate) (lo hi: int) : int
    = numof (fun i -> a[i] = c) lo hi

  let mjrty (a: array candidate) : candidate
    requires { 1 <= length a }
    ensures  { 2 * num a result 0 (length a) > length a }
    raises   { Not_found -> forall c. 2 * num a c 0 (length a) <= length a }
  = let n = length a in
    let ref cand = a[0] in
    let ref k = 1 in
    for i = 1 to n - 1 do
      invariant { 0 <= k <= num a cand 0 i }
      invariant { 2 * (num a cand 0 i - k) <= i - k }
      invariant { forall c. c <> cand -> 2 * num a c 0 i <= i - k }
      if k = 0 then begin
        cand <- a[i];
        k <- 1
      end else if cand = a[i] then
        incr k
      else
        decr k
    done;
    if k = 0 then raise Not_found;
    if k > n / 2 then return cand;
    k <- 0;
    for i = 0 to n - 1 do
      invariant { k = num a cand 0 i /\ 2 * k <= n }
      if a[i] = cand then begin
        incr k;
        if k > n / 2 then return cand
      end
    done;
    raise Not_found
end

module Correct

  use Impl

  clone Mjrty.Sig with function num, val mjrty

end


(*
Local Variables:
compile-command: "make mjrty_impl.ide"
End:
*)
