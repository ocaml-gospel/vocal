<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="Alt-Ergo" version="2.3.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="Z3" version="4.8.6" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="PairingHeap_impl.mlw"/>
<theory name="Impl" proved="true">
 <goal name="Make.le_roots_trans" proved="true">
 <transf name="induction_ty_lex" proved="true" >
  <goal name="le_roots_trans.0" proved="true">
  <proof prover="0"><result status="valid" time="0.17" steps="248"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.size_heap_nonneg&#39;vc" expl="VC for size_heap_nonneg" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.04" steps="96"/></proof>
 </goal>
 <goal name="Make.size_heap_list_nonneg&#39;vc" expl="VC for size_heap_list_nonneg" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.04" steps="129"/></proof>
 </goal>
 <goal name="Make.size_empty&#39;vc" expl="VC for size_empty" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.03" steps="69"/></proof>
 </goal>
 <goal name="Make.occ_heap_nonneg&#39;vc" expl="VC for occ_heap_nonneg" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.04" steps="114"/></proof>
 </goal>
 <goal name="Make.occ_heap_list_nonneg&#39;vc" expl="VC for occ_heap_list_nonneg" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.04" steps="147"/></proof>
 </goal>
 <goal name="Make.mem_heap&#39;vc" expl="VC for mem_heap" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.36" steps="2061"/></proof>
 </goal>
 <goal name="Make.mem_heap_list&#39;vc" expl="VC for mem_heap_list" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.13" steps="724"/></proof>
 </goal>
 <goal name="Make.root_is_minimum_heap&#39;vc" expl="VC for root_is_minimum_heap" proved="true">
 <proof prover="0"><result status="valid" time="0.06" steps="308"/></proof>
 </goal>
 <goal name="Make.heap&#39;vc" expl="VC for heap" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.78" steps="2833"/></proof>
 </goal>
 <goal name="Make.size_nonneg" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.03" steps="66"/></proof>
 </goal>
 <goal name="Make.le_root_heap_trans" proved="true">
 <proof prover="0"><result status="valid" time="0.12" steps="182"/></proof>
 </goal>
 <goal name="Make.le_root_trans" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.03" steps="74"/></proof>
 </goal>
 <goal name="Make.occ_nonneg" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.04" steps="66"/></proof>
 </goal>
 <goal name="Make.mem_t" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.05" steps="154"/></proof>
 </goal>
 <goal name="Make.root_is_minimum" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.03" steps="83"/></proof>
 </goal>
 <goal name="Make.empty&#39;vc" expl="VC for empty" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.04" steps="172"/></proof>
 </goal>
 <goal name="Make.is_empty&#39;vc" expl="VC for is_empty" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.04" steps="94"/></proof>
 </goal>
 <goal name="Make.find_min&#39;vc" expl="VC for find_min" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.03" steps="95"/></proof>
 </goal>
 <goal name="Make.merge_heap&#39;vc" expl="VC for merge_heap" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.73" steps="4659"/></proof>
 </goal>
 <goal name="Make.merge&#39;vc" expl="VC for merge" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.11" steps="459"/></proof>
 </goal>
 <goal name="Make.insert&#39;vc" expl="VC for insert" proved="true">
 <proof prover="0"><result status="valid" time="0.29" steps="1260"/></proof>
 </goal>
 <goal name="Make.merge_pairs_heap&#39;vc" expl="VC for merge_pairs_heap" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.15" steps="762"/></proof>
 </goal>
 <goal name="Make.delete_min&#39;vc" expl="VC for delete_min" proved="true">
 <proof prover="0" timelimit="5"><result status="valid" time="0.30" steps="1449"/></proof>
 </goal>
</theory>
<theory name="Correct" proved="true">
 <goal name="Sig.Make.X.is_pre_order" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="26"/></proof>
 </goal>
 <goal name="Sig.Make.X.compare&#39;vc" expl="VC for compare" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="26"/></proof>
 </goal>
 <goal name="Sig.Make.empty&#39;vc" expl="VC for empty" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="87"/></proof>
 </goal>
 <goal name="Sig.Make.is_empty&#39;vc" expl="VC for is_empty" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="81"/></proof>
 </goal>
 <goal name="Sig.Make.merge&#39;vc" expl="VC for merge" proved="true">
 <proof prover="0"><result status="valid" time="0.06" steps="276"/></proof>
 </goal>
 <goal name="Sig.Make.insert&#39;vc" expl="VC for insert" proved="true">
 <proof prover="0"><result status="valid" time="0.07" steps="242"/></proof>
 </goal>
 <goal name="Sig.Make.min_def" proved="true">
 <transf name="unfold" proved="true" arg1="is_minimum">
  <goal name="min_def.0" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="min_def.0.0" proved="true">
   <proof prover="0"><result status="valid" time="0.04" steps="112"/></proof>
   </goal>
   <goal name="min_def.0.1" proved="true">
   <proof prover="1"><result status="valid" time="0.08" steps="209912"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Sig.Make.find_min&#39;vc" expl="VC for find_min" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="30"/></proof>
 </goal>
 <goal name="Sig.Make.delete_min&#39;vc" expl="VC for delete_min" proved="true">
 <proof prover="0"><result status="valid" time="0.05" steps="284"/></proof>
 </goal>
</theory>
<theory name="CompareInt" proved="true">
 <goal name="compare&#39;vc" expl="VC for compare" proved="true">
 <proof prover="0"><result status="valid" time="0.01" steps="90"/></proof>
 </goal>
</theory>
<theory name="Client" proved="true">
 <goal name="Sig.Make.X.is_pre_order" proved="true">
 <proof prover="0"><result status="valid" time="0.10" steps="253"/></proof>
 </goal>
 <goal name="Sig.Make.X.compare&#39;vc" expl="VC for compare" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="14"/></proof>
 </goal>
 <goal name="min3&#39;vc" expl="VC for min3" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="min3&#39;vc.0" expl="precondition" proved="true">
  <proof prover="0"><result status="valid" time="0.03" steps="28"/></proof>
  </goal>
  <goal name="min3&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.10" steps="264"/></proof>
  </goal>
  <goal name="min3&#39;vc.2" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="min3&#39;vc.2.0" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="Ensures">
    <goal name="min3&#39;vc.2.0.0" expl="postcondition" proved="true">
    <proof prover="0"><result status="valid" time="0.01" steps="30"/></proof>
    </goal>
    <goal name="min3&#39;vc.2.0.1" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="Ensures">
     <goal name="min3&#39;vc.2.0.1.0" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="(is_minimum y h)">
      <goal name="min3&#39;vc.2.0.1.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.03" steps="32"/></proof>
      </goal>
      <goal name="min3&#39;vc.2.0.1.0.1" expl="postcondition" proved="true">
      <transf name="assert" proved="true" arg1="(mem x h1)">
       <goal name="min3&#39;vc.2.0.1.0.1.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.04" steps="146"/></proof>
       </goal>
       <goal name="min3&#39;vc.2.0.1.0.1.1" expl="postcondition" proved="true">
       <proof prover="0"><result status="valid" time="0.04" steps="213"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="min3&#39;vc.2.0.1.1" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="(is_minimum z h)">
      <goal name="min3&#39;vc.2.0.1.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.02" steps="32"/></proof>
      </goal>
      <goal name="min3&#39;vc.2.0.1.1.1" expl="postcondition" proved="true">
      <transf name="assert" proved="true" arg1="(mem x h1)">
       <goal name="min3&#39;vc.2.0.1.1.1.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.04" steps="139"/></proof>
       </goal>
       <goal name="min3&#39;vc.2.0.1.1.1.1" expl="postcondition" proved="true">
       <proof prover="0"><result status="valid" time="0.05" steps="185"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="min3&#39;vc.2.1" expl="postcondition" proved="true">
   <transf name="destruct" proved="true" arg1="Ensures">
    <goal name="min3&#39;vc.2.1.0" expl="postcondition" proved="true">
    <transf name="assert" proved="true" arg1="(is_minimum x h)">
     <goal name="min3&#39;vc.2.1.0.0" expl="asserted formula" proved="true">
     <proof prover="0"><result status="valid" time="0.02" steps="32"/></proof>
     </goal>
     <goal name="min3&#39;vc.2.1.0.1" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="(mem y h1)">
      <goal name="min3&#39;vc.2.1.0.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.03" steps="98"/></proof>
      </goal>
      <goal name="min3&#39;vc.2.1.0.1.1" expl="postcondition" proved="true">
      <proof prover="0"><result status="valid" time="0.04" steps="212"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
    <goal name="min3&#39;vc.2.1.1" expl="postcondition" proved="true">
    <transf name="destruct" proved="true" arg1="Ensures">
     <goal name="min3&#39;vc.2.1.1.0" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="(is_minimum y h)">
      <goal name="min3&#39;vc.2.1.1.0.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.03" steps="32"/></proof>
      </goal>
      <goal name="min3&#39;vc.2.1.1.0.1" expl="postcondition" proved="true">
      <transf name="assert" proved="true" arg1="(mem x h1)">
       <goal name="min3&#39;vc.2.1.1.0.1.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.05" steps="146"/></proof>
       </goal>
       <goal name="min3&#39;vc.2.1.1.0.1.1" expl="postcondition" proved="true">
       <proof prover="0"><result status="valid" time="0.03" steps="34"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
     <goal name="min3&#39;vc.2.1.1.1" expl="postcondition" proved="true">
     <transf name="assert" proved="true" arg1="(is_minimum z h)">
      <goal name="min3&#39;vc.2.1.1.1.0" expl="asserted formula" proved="true">
      <proof prover="0"><result status="valid" time="0.03" steps="32"/></proof>
      </goal>
      <goal name="min3&#39;vc.2.1.1.1.1" expl="postcondition" proved="true">
      <transf name="assert" proved="true" arg1="(mem y h1)">
       <goal name="min3&#39;vc.2.1.1.1.1.0" expl="asserted formula" proved="true">
       <proof prover="0"><result status="valid" time="0.02" steps="98"/></proof>
       </goal>
       <goal name="min3&#39;vc.2.1.1.1.1.1" expl="postcondition" proved="true">
       <proof prover="0"><result status="valid" time="0.05" steps="299"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="min3&#39;vc.2.2" expl="postcondition" proved="true">
   <proof prover="1"><result status="valid" time="0.09" steps="195424"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="PHint" proved="true">
 <goal name="Impl.Make.X.is_pre_order" proved="true">
 <proof prover="0"><result status="valid" time="0.06" steps="253"/></proof>
 </goal>
 <goal name="Impl.Make.X.compare&#39;vc" expl="VC for compare" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="compare&#39;vc.0" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.01" steps="14"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Main" proved="true">
 <goal name="Client.Sig.Make.empty&#39;vc" expl="VC for empty" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="96"/></proof>
 </goal>
 <goal name="Client.Sig.Make.is_empty&#39;vc" expl="VC for is_empty" proved="true">
 <proof prover="0"><result status="valid" time="0.03" steps="90"/></proof>
 </goal>
 <goal name="Client.Sig.Make.merge&#39;vc" expl="VC for merge" proved="true">
 <proof prover="0"><result status="valid" time="0.08" steps="285"/></proof>
 </goal>
 <goal name="Client.Sig.Make.insert&#39;vc" expl="VC for insert" proved="true">
 <proof prover="0"><result status="valid" time="0.07" steps="251"/></proof>
 </goal>
 <goal name="Client.Sig.Make.min_def" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="min_def.0" proved="true">
  <transf name="unfold" proved="true" arg1="is_minimum">
   <goal name="min_def.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="min_def.0.0.0" proved="true">
    <proof prover="0"><result status="valid" time="0.05" steps="121"/></proof>
    </goal>
    <goal name="min_def.0.0.1" proved="true">
    <proof prover="1"><result status="valid" time="0.08" steps="218071"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Client.Sig.Make.find_min&#39;vc" expl="VC for find_min" proved="true">
 <proof prover="0"><result status="valid" time="0.02" steps="32"/></proof>
 </goal>
 <goal name="Client.Sig.Make.delete_min&#39;vc" expl="VC for delete_min" proved="true">
 <proof prover="0"><result status="valid" time="0.04" steps="227"/></proof>
 </goal>
</theory>
</file>
</why3session>
