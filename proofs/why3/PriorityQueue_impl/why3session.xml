<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"http://why3.lri.fr/why3session.dtd">
<why3session shape_version="6">
<prover id="2" name="Z3" version="4.8.6" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="CVC4" version="1.6" timelimit="5" steplimit="0" memlimit="1000"/>
<prover id="6" name="Alt-Ergo" version="2.3.0" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="whyml" proved="true">
<path name=".."/><path name="PriorityQueue_impl.mlw"/>
<theory name="Impl" proved="true">
 <goal name="Make.heap&#39;vc" expl="VC for heap" proved="true">
 <proof prover="6"><result status="valid" time="0.05" steps="86"/></proof>
 </goal>
 <goal name="Make.num_exist" proved="true">
 <proof prover="2"><result status="valid" time="0.11" steps="341410"/></proof>
 </goal>
 <goal name="Make.min_coherent&#39;vc" expl="VC for min_coherent" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="min_coherent&#39;vc.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="24"/></proof>
  </goal>
  <goal name="min_coherent&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="26"/></proof>
  </goal>
  <goal name="min_coherent&#39;vc.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="27"/></proof>
  </goal>
  <goal name="min_coherent&#39;vc.3" expl="postcondition" proved="true">
  <transf name="case" proved="true" arg1="(i=0)">
   <goal name="min_coherent&#39;vc.3.0" expl="true case (postcondition)" proved="true">
   <proof prover="6"><result status="valid" time="0.03" steps="68"/></proof>
   </goal>
   <goal name="min_coherent&#39;vc.3.1" expl="false case (postcondition)" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="min_coherent&#39;vc.3.1.0" expl="false case (postcondition)" proved="true">
    <proof prover="3"><result status="valid" time="2.30" steps="280223"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="min_coherent&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.31" steps="596"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.sub_occ_1" proved="true">
 <transf name="split_all_full" proved="true" >
  <goal name="sub_occ_1.0" proved="true">
  <proof prover="3"><result status="valid" time="0.94" steps="128258"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.sub_occ_2" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="sub_occ_2.0" proved="true">
  <transf name="assert" proved="true" arg1="(numocc a1 (view a1)[int63&#39;int i] 0 i   = numocc a2 (view a1)[int63&#39;int i] 0 i)">
   <goal name="sub_occ_2.0.0" expl="asserted formula" proved="true">
   <proof prover="3"><result status="valid" time="0.60" steps="93027"/></proof>
   </goal>
   <goal name="sub_occ_2.0.1" proved="true">
   <transf name="assert" proved="true" arg1="(numocc a1 (view a1)[int63&#39;int i] (i+1) (length1 (view a1))  = numocc a2 (view a1)[int63&#39;int i] (i+1) (length1 (view a2)))">
    <goal name="sub_occ_2.0.1.0" expl="asserted formula" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="sub_occ_2.0.1.0.0" expl="asserted formula" proved="true">
     <proof prover="3"><result status="valid" time="1.69" steps="174753"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="sub_occ_2.0.1.1" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="sub_occ_2.0.1.1.0" proved="true">
     <proof prover="3"><result status="valid" time="2.60" steps="239347"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.sub_occ_3" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="sub_occ_3.0" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="sub_occ_3.0.0" proved="true">
   <proof prover="3"><result status="valid" time="0.70" steps="106558"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.sub_order&#39;vc" expl="VC for sub_order" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="sub_order&#39;vc.0" expl="VC for sub_order" proved="true">
  <transf name="unfold" proved="true" arg1="heap_order">
   <goal name="sub_order&#39;vc.0.0" expl="VC for sub_order" proved="true">
   <transf name="introduce_premises" proved="true" >
    <goal name="sub_order&#39;vc.0.0.0" expl="VC for sub_order" proved="true">
    <transf name="case" proved="true" arg1="(i = i1)">
     <goal name="sub_order&#39;vc.0.0.0.0" expl="true case" proved="true">
     <transf name="split_vc" proved="true" >
      <goal name="sub_order&#39;vc.0.0.0.0.0" expl="VC for sub_order" proved="true">
      <proof prover="6"><result status="valid" time="0.21" steps="224"/></proof>
      </goal>
      <goal name="sub_order&#39;vc.0.0.0.0.1" expl="VC for sub_order" proved="true">
      <proof prover="6"><result status="valid" time="0.20" steps="245"/></proof>
      </goal>
     </transf>
     </goal>
     <goal name="sub_order&#39;vc.0.0.0.1" expl="false case" proved="true">
     <transf name="case" proved="true" arg1="(i = div (i1 - 1) 2)">
      <goal name="sub_order&#39;vc.0.0.0.1.0" expl="false case (true case)" proved="true">
      <proof prover="6"><result status="valid" time="0.56" steps="1664"/></proof>
      </goal>
      <goal name="sub_order&#39;vc.0.0.0.1.1" expl="false case" proved="true">
      <proof prover="6"><result status="valid" time="0.60" steps="1558"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.pop_occ_1" proved="true">
 <transf name="introduce_premises" proved="true" >
  <goal name="pop_occ_1.0" proved="true">
  <transf name="assert" proved="true" arg1="(numocc a1 x 0 (length1 (view a2)) = numocc a2 x 0 (length1 (view a2)))">
   <goal name="pop_occ_1.0.0" expl="asserted formula" proved="true">
   <proof prover="6" timelimit="5"><result status="valid" time="2.36" steps="1600"/></proof>
   </goal>
   <goal name="pop_occ_1.0.1" proved="true">
   <proof prover="6"><result status="valid" time="0.13" steps="99"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.pop_occ_2" proved="true">
 <transf name="unfold" proved="true" arg1="numocc&#39;">
  <goal name="pop_occ_2.0" proved="true">
  <transf name="unfold" proved="true" arg1="pop">
   <goal name="pop_occ_2.0.0" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="pop_occ_2.0.0.0" proved="true">
    <proof prover="3"><result status="valid" time="2.24" steps="285408"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.pop_order" proved="true">
 <proof prover="6"><result status="valid" time="0.13" steps="148"/></proof>
 </goal>
 <goal name="Make.push_occ&#39;vc" expl="VC for push_occ" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="push_occ&#39;vc.0" expl="postcondition" proved="true">
  <transf name="assert" proved="true" arg1="(numocc a1 x 0 (length1 (view a1)) = numocc a2 x 0 (length1 (view a2) - 1))">
   <goal name="push_occ&#39;vc.0.0" expl="asserted formula" proved="true">
   <proof prover="6" timelimit="5"><result status="valid" time="2.61" steps="1539"/></proof>
   </goal>
   <goal name="push_occ&#39;vc.0.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.18" steps="100"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="push_occ&#39;vc.1" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="73"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.push_order&#39;vc" expl="VC for push_order" proved="true">
 <proof prover="6"><result status="valid" time="0.22" steps="350"/></proof>
 </goal>
 <goal name="Make.same_occ" proved="true">
 <proof prover="6"><result status="valid" time="0.05" steps="71"/></proof>
 </goal>
 <goal name="Make.ancestor&#39;vc" expl="VC for ancestor" proved="true">
 <transf name="inline_goal" proved="true" >
  <goal name="ancestor&#39;vc.0" expl="VC for ancestor" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="ancestor&#39;vc.0.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.38" steps="551"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.children&#39;vc" expl="VC for children" proved="true">
 <proof prover="6"><result status="valid" time="0.04" steps="71"/></proof>
 </goal>
 <goal name="Make.trans&#39;vc" expl="VC for trans" proved="true">
 <proof prover="6"><result status="valid" time="0.31" steps="442"/></proof>
 </goal>
 <goal name="Make.create&#39;vc" expl="VC for create" proved="true">
 <proof prover="6"><result status="valid" time="0.05" steps="98"/></proof>
 </goal>
 <goal name="Make.is_empty&#39;vc" expl="VC for is_empty" proved="true">
 <proof prover="6"><result status="valid" time="0.03" steps="52"/></proof>
 </goal>
 <goal name="Make.size&#39;vc" expl="VC for size" proved="true">
 <proof prover="6"><result status="valid" time="0.03" steps="20"/></proof>
 </goal>
 <goal name="Make.find_min_exn&#39;vc" expl="VC for find_min_exn" proved="true">
 <proof prover="6"><result status="valid" time="0.02" steps="60"/></proof>
 </goal>
 <goal name="Make.find_min&#39;vc" expl="VC for find_min" proved="true">
 <proof prover="6"><result status="valid" time="0.03" steps="126"/></proof>
 </goal>
 <goal name="Make.move_down&#39;vc" expl="VC for move_down" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="move_down&#39;vc.0" expl="integer overflow" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="29"/></proof>
  </goal>
  <goal name="move_down&#39;vc.1" expl="division by zero" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="28"/></proof>
  </goal>
  <goal name="move_down&#39;vc.2" expl="integer overflow" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="142"/></proof>
  </goal>
  <goal name="move_down&#39;vc.3" expl="integer overflow" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="37"/></proof>
  </goal>
  <goal name="move_down&#39;vc.4" expl="integer overflow" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="39"/></proof>
  </goal>
  <goal name="move_down&#39;vc.5" expl="integer overflow" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="41"/></proof>
  </goal>
  <goal name="move_down&#39;vc.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="34"/></proof>
  </goal>
  <goal name="move_down&#39;vc.7" expl="integer overflow" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="45"/></proof>
  </goal>
  <goal name="move_down&#39;vc.8" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="36"/></proof>
  </goal>
  <goal name="move_down&#39;vc.9" expl="integer overflow" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="move_down&#39;vc.9.0" expl="integer overflow" proved="true">
   <proof prover="6"><result status="valid" time="0.07" steps="49"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="move_down&#39;vc.10" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="32"/></proof>
  </goal>
  <goal name="move_down&#39;vc.11" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="32"/></proof>
  </goal>
  <goal name="move_down&#39;vc.12" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="32"/></proof>
  </goal>
  <goal name="move_down&#39;vc.13" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="32"/></proof>
  </goal>
  <goal name="move_down&#39;vc.14" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="171"/></proof>
  </goal>
  <goal name="move_down&#39;vc.15" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="62"/></proof>
  </goal>
  <goal name="move_down&#39;vc.16" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="34"/></proof>
  </goal>
  <goal name="move_down&#39;vc.17" expl="assertion" proved="true">
  <proof prover="2"><result status="valid" time="0.10" steps="218230"/></proof>
  </goal>
  <goal name="move_down&#39;vc.18" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="40"/></proof>
  </goal>
  <goal name="move_down&#39;vc.19" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="40"/></proof>
  </goal>
  <goal name="move_down&#39;vc.20" expl="precondition" proved="true">
  <proof prover="6" timelimit="5"><result status="valid" time="2.04" steps="2304"/></proof>
  </goal>
  <goal name="move_down&#39;vc.21" expl="precondition" proved="true">
  <proof prover="6" timelimit="40"><result status="valid" time="1.32" steps="2143"/></proof>
  </goal>
  <goal name="move_down&#39;vc.22" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.27" steps="621"/></proof>
  </goal>
  <goal name="move_down&#39;vc.23" expl="assertion" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="move_down&#39;vc.23.0" expl="assertion" proved="true">
   <proof prover="6"><result status="valid" time="0.03" steps="42"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="move_down&#39;vc.24" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="49"/></proof>
  </goal>
  <goal name="move_down&#39;vc.25" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="42"/></proof>
  </goal>
  <goal name="move_down&#39;vc.26" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="70"/></proof>
  </goal>
  <goal name="move_down&#39;vc.27" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="153"/></proof>
  </goal>
  <goal name="move_down&#39;vc.28" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="sub_order" arg2="a1,a,i">
   <goal name="move_down&#39;vc.28.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.02" steps="48"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="move_down&#39;vc.29" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="1.03" steps="100912"/></proof>
  </goal>
  <goal name="move_down&#39;vc.30" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="move_down&#39;vc.30.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.35" steps="1164"/></proof>
   </goal>
   <goal name="move_down&#39;vc.30.1" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="move_down&#39;vc.30.1.0" expl="postcondition" proved="true">
    <proof prover="6"><result status="valid" time="0.35" steps="1181"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="move_down&#39;vc.30.2" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.33" steps="1450"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="move_down&#39;vc.31" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="50"/></proof>
  </goal>
  <goal name="move_down&#39;vc.32" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="34"/></proof>
  </goal>
  <goal name="move_down&#39;vc.33" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.86" steps="1124"/></proof>
  </goal>
  <goal name="move_down&#39;vc.34" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="40"/></proof>
  </goal>
  <goal name="move_down&#39;vc.35" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="40"/></proof>
  </goal>
  <goal name="move_down&#39;vc.36" expl="precondition" proved="true">
  <transf name="assert" proved="true" arg1="(cmp (view a1)[i] (view a1)[j] &lt;= 0)">
   <goal name="move_down&#39;vc.36.0" expl="asserted formula" proved="true">
   <proof prover="6"><result status="valid" time="0.17" steps="293"/></proof>
   </goal>
   <goal name="move_down&#39;vc.36.1" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="59"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="move_down&#39;vc.37" expl="precondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="move_down&#39;vc.37.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.72" steps="1292"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="move_down&#39;vc.38" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.90" steps="1172"/></proof>
  </goal>
  <goal name="move_down&#39;vc.39" expl="postcondition" proved="true">
  <transf name="instantiate" proved="true" arg1="sub_order" arg2="a1,a,i">
   <goal name="move_down&#39;vc.39.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.04" steps="42"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="move_down&#39;vc.40" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="66"/></proof>
  </goal>
  <goal name="move_down&#39;vc.41" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="move_down&#39;vc.41.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.10" steps="64"/></proof>
   </goal>
   <goal name="move_down&#39;vc.41.1" expl="postcondition" proved="true">
   <transf name="split_all_full" proved="true" >
    <goal name="move_down&#39;vc.41.1.0" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.08" steps="272674"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="move_down&#39;vc.41.2" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.09" steps="64"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="move_down&#39;vc.42" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="44"/></proof>
  </goal>
  <goal name="move_down&#39;vc.43" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="26"/></proof>
  </goal>
  <goal name="move_down&#39;vc.44" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="306"/></proof>
  </goal>
  <goal name="move_down&#39;vc.45" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="307"/></proof>
  </goal>
  <goal name="move_down&#39;vc.46" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="43"/></proof>
  </goal>
  <goal name="move_down&#39;vc.47" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="move_down&#39;vc.47.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.03" steps="41"/></proof>
   </goal>
   <goal name="move_down&#39;vc.47.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.66" steps="506"/></proof>
   </goal>
   <goal name="move_down&#39;vc.47.2" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.05" steps="41"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="move_down&#39;vc.48" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="36"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.extract_min_exn&#39;vc" expl="VC for extract_min_exn" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="extract_min_exn&#39;vc.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="30"/></proof>
  </goal>
  <goal name="extract_min_exn&#39;vc.1" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="85"/></proof>
  </goal>
  <goal name="extract_min_exn&#39;vc.2" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="116"/></proof>
  </goal>
  <goal name="extract_min_exn&#39;vc.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="295"/></proof>
  </goal>
  <goal name="extract_min_exn&#39;vc.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="36"/></proof>
  </goal>
  <goal name="extract_min_exn&#39;vc.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="37"/></proof>
  </goal>
  <goal name="extract_min_exn&#39;vc.6" expl="type invariant" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="43"/></proof>
  </goal>
  <goal name="extract_min_exn&#39;vc.7" expl="type invariant" proved="true">
  <transf name="case" proved="true" arg1="(x = min)">
   <goal name="extract_min_exn&#39;vc.7.0" expl="true case (type invariant)" proved="true">
   <transf name="case" proved="true" arg1="(x = x1)">
    <goal name="extract_min_exn&#39;vc.7.0.0" expl="true case (type invariant)" proved="true">
    <proof prover="6"><result status="valid" time="0.67" steps="967"/></proof>
    </goal>
    <goal name="extract_min_exn&#39;vc.7.0.1" expl="false case (true case. type invariant)" proved="true">
    <proof prover="6"><result status="valid" time="0.72" steps="802"/></proof>
    </goal>
   </transf>
   </goal>
   <goal name="extract_min_exn&#39;vc.7.1" expl="false case (type invariant)" proved="true">
   <transf name="case" proved="true" arg1="(x = x1)">
    <goal name="extract_min_exn&#39;vc.7.1.0" expl="false case (true case. type invariant)" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="extract_min_exn&#39;vc.7.1.0.0" expl="false case (true case. type invariant)" proved="true">
     <proof prover="6"><result status="valid" time="0.72" steps="826"/></proof>
     </goal>
    </transf>
    </goal>
    <goal name="extract_min_exn&#39;vc.7.1.1" expl="false case (type invariant)" proved="true">
    <proof prover="6"><result status="valid" time="0.61" steps="736"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="extract_min_exn&#39;vc.8" expl="type invariant" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="40"/></proof>
  </goal>
  <goal name="extract_min_exn&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="42"/></proof>
  </goal>
  <goal name="extract_min_exn&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="154"/></proof>
  </goal>
  <goal name="extract_min_exn&#39;vc.11" expl="type invariant" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="30"/></proof>
  </goal>
  <goal name="extract_min_exn&#39;vc.12" expl="type invariant" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="118"/></proof>
  </goal>
  <goal name="extract_min_exn&#39;vc.13" expl="type invariant" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="80"/></proof>
  </goal>
  <goal name="extract_min_exn&#39;vc.14" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="34"/></proof>
  </goal>
  <goal name="extract_min_exn&#39;vc.15" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.34" steps="514788"/></proof>
  </goal>
  <goal name="extract_min_exn&#39;vc.16" expl="type invariant" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="22"/></proof>
  </goal>
  <goal name="extract_min_exn&#39;vc.17" expl="type invariant" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="76"/></proof>
  </goal>
  <goal name="extract_min_exn&#39;vc.18" expl="type invariant" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="60"/></proof>
  </goal>
  <goal name="extract_min_exn&#39;vc.19" expl="exceptional postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="26"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.delete_min_exn&#39;vc" expl="VC for delete_min_exn" proved="true">
 <proof prover="6"><result status="valid" time="0.04" steps="12"/></proof>
 </goal>
 <goal name="Make.move_up&#39;vc" expl="VC for move_up" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="move_up&#39;vc.0" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="22"/></proof>
  </goal>
  <goal name="move_up&#39;vc.1" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="260"/></proof>
  </goal>
  <goal name="move_up&#39;vc.2" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="28"/></proof>
  </goal>
  <goal name="move_up&#39;vc.3" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="28"/></proof>
  </goal>
  <goal name="move_up&#39;vc.4" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="28"/></proof>
  </goal>
  <goal name="move_up&#39;vc.5" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="101"/></proof>
  </goal>
  <goal name="move_up&#39;vc.6" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="120"/></proof>
  </goal>
  <goal name="move_up&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="30"/></proof>
  </goal>
  <goal name="move_up&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="38"/></proof>
  </goal>
  <goal name="move_up&#39;vc.9" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="move_up&#39;vc.9.0" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.06" steps="36"/></proof>
   </goal>
   <goal name="move_up&#39;vc.9.1" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.52" steps="666"/></proof>
   </goal>
   <goal name="move_up&#39;vc.9.2" expl="postcondition" proved="true">
   <proof prover="6"><result status="valid" time="0.06" steps="36"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="move_up&#39;vc.10" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="32"/></proof>
  </goal>
  <goal name="move_up&#39;vc.11" expl="integer overflow" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="28"/></proof>
  </goal>
  <goal name="move_up&#39;vc.12" expl="division by zero" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="26"/></proof>
  </goal>
  <goal name="move_up&#39;vc.13" expl="integer overflow" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="100"/></proof>
  </goal>
  <goal name="move_up&#39;vc.14" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="71"/></proof>
  </goal>
  <goal name="move_up&#39;vc.15" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="28"/></proof>
  </goal>
  <goal name="move_up&#39;vc.16" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="71"/></proof>
  </goal>
  <goal name="move_up&#39;vc.17" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="28"/></proof>
  </goal>
  <goal name="move_up&#39;vc.18" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="28"/></proof>
  </goal>
  <goal name="move_up&#39;vc.19" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="30"/></proof>
  </goal>
  <goal name="move_up&#39;vc.20" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="233"/></proof>
  </goal>
  <goal name="move_up&#39;vc.21" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="36"/></proof>
  </goal>
  <goal name="move_up&#39;vc.22" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="36"/></proof>
  </goal>
  <goal name="move_up&#39;vc.23" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="36"/></proof>
  </goal>
  <goal name="move_up&#39;vc.24" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="36"/></proof>
  </goal>
  <goal name="move_up&#39;vc.25" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.21" steps="203"/></proof>
  </goal>
  <goal name="move_up&#39;vc.26" expl="precondition" proved="true">
  <transf name="split_all_full" proved="true" >
   <goal name="move_up&#39;vc.26.0" expl="precondition" proved="true">
   <proof prover="6"><result status="valid" time="0.20" steps="295"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="move_up&#39;vc.27" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="291"/></proof>
  </goal>
  <goal name="move_up&#39;vc.28" expl="variant decrease" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="44"/></proof>
  </goal>
  <goal name="move_up&#39;vc.29" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="38"/></proof>
  </goal>
  <goal name="move_up&#39;vc.30" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="127"/></proof>
  </goal>
  <goal name="move_up&#39;vc.31" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="le">
   <goal name="move_up&#39;vc.31.0" expl="VC for move_up" proved="true">
   <transf name="assert" proved="true" arg1="(int63&#39;int (cmp x (view a1)[j]) &lt;= 0)">
    <goal name="move_up&#39;vc.31.0.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.10" steps="197"/></proof>
    </goal>
    <goal name="move_up&#39;vc.31.0.1" expl="VC for move_up" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="move_up&#39;vc.31.0.1.0" expl="VC for move_up" proved="true">
     <proof prover="6"><result status="valid" time="0.19" steps="333"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="move_up&#39;vc.32" expl="precondition" proved="true">
  <transf name="unfold" proved="true" arg1="le">
   <goal name="move_up&#39;vc.32.0" expl="VC for move_up" proved="true">
   <transf name="assert" proved="true" arg1="(int63&#39;int (cmp x (view a1)[j]) &lt;= 0)">
    <goal name="move_up&#39;vc.32.0.0" expl="asserted formula" proved="true">
    <proof prover="6"><result status="valid" time="0.10" steps="186"/></proof>
    </goal>
    <goal name="move_up&#39;vc.32.0.1" expl="VC for move_up" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="move_up&#39;vc.32.0.1.0" expl="VC for move_up" proved="true">
     <proof prover="6"><result status="valid" time="0.23" steps="287"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="move_up&#39;vc.33" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="44"/></proof>
  </goal>
  <goal name="move_up&#39;vc.34" expl="postcondition" proved="true">
  <proof prover="6" timelimit="50"><result status="valid" time="23.09" steps="3900"/></proof>
  </goal>
  <goal name="move_up&#39;vc.35" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.29" steps="601"/></proof>
  </goal>
  <goal name="move_up&#39;vc.36" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="46"/></proof>
  </goal>
  <goal name="move_up&#39;vc.37" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="30"/></proof>
  </goal>
  <goal name="move_up&#39;vc.38" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.20" steps="232"/></proof>
  </goal>
  <goal name="move_up&#39;vc.39" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="36"/></proof>
  </goal>
  <goal name="move_up&#39;vc.40" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="36"/></proof>
  </goal>
  <goal name="move_up&#39;vc.41" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="37"/></proof>
  </goal>
  <goal name="move_up&#39;vc.42" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="251"/></proof>
  </goal>
  <goal name="move_up&#39;vc.43" expl="precondition" proved="true">
  <proof prover="6" timelimit="16"><result status="valid" time="0.21" steps="251"/></proof>
  </goal>
  <goal name="move_up&#39;vc.44" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.02" steps="38"/></proof>
  </goal>
  <goal name="move_up&#39;vc.45" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="48"/></proof>
  </goal>
  <goal name="move_up&#39;vc.46" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.71" steps="1021"/></proof>
  </goal>
  <goal name="move_up&#39;vc.47" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="40"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.insert&#39;vc" expl="VC for insert" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="insert&#39;vc.0" expl="exceptional postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.03" steps="20"/></proof>
  </goal>
  <goal name="insert&#39;vc.1" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="30"/></proof>
  </goal>
  <goal name="insert&#39;vc.2" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="136"/></proof>
  </goal>
  <goal name="insert&#39;vc.3" expl="type invariant" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="36"/></proof>
  </goal>
  <goal name="insert&#39;vc.4" expl="type invariant" proved="true">
  <proof prover="6"><result status="valid" time="0.55" steps="655"/></proof>
  </goal>
  <goal name="insert&#39;vc.5" expl="type invariant" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="114"/></proof>
  </goal>
  <goal name="insert&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="38"/></proof>
  </goal>
  <goal name="insert&#39;vc.7" expl="integer overflow" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="99"/></proof>
  </goal>
  <goal name="insert&#39;vc.8" expl="division by zero" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="32"/></proof>
  </goal>
  <goal name="insert&#39;vc.9" expl="integer overflow" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="127"/></proof>
  </goal>
  <goal name="insert&#39;vc.10" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="107"/></proof>
  </goal>
  <goal name="insert&#39;vc.11" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="36"/></proof>
  </goal>
  <goal name="insert&#39;vc.12" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.07" steps="109"/></proof>
  </goal>
  <goal name="insert&#39;vc.13" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="40"/></proof>
  </goal>
  <goal name="insert&#39;vc.14" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.06" steps="44"/></proof>
  </goal>
  <goal name="insert&#39;vc.15" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.13" steps="159"/></proof>
  </goal>
  <goal name="insert&#39;vc.16" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="169"/></proof>
  </goal>
  <goal name="insert&#39;vc.17" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="50"/></proof>
  </goal>
  <goal name="insert&#39;vc.18" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.14" steps="175"/></proof>
  </goal>
  <goal name="insert&#39;vc.19" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="191"/></proof>
  </goal>
  <goal name="insert&#39;vc.20" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="46"/></proof>
  </goal>
  <goal name="insert&#39;vc.21" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.10" steps="247"/></proof>
  </goal>
  <goal name="insert&#39;vc.22" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.37" steps="614"/></proof>
  </goal>
  <goal name="insert&#39;vc.23" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.26" steps="249"/></proof>
  </goal>
  <goal name="insert&#39;vc.24" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.11" steps="189"/></proof>
  </goal>
  <goal name="insert&#39;vc.25" expl="type invariant" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="61"/></proof>
  </goal>
  <goal name="insert&#39;vc.26" expl="type invariant" proved="true">
  <proof prover="6"><result status="valid" time="0.34" steps="638"/></proof>
  </goal>
  <goal name="insert&#39;vc.27" expl="type invariant" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="56"/></proof>
  </goal>
  <goal name="insert&#39;vc.28" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="58"/></proof>
  </goal>
  <goal name="insert&#39;vc.29" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="40"/></proof>
  </goal>
  <goal name="insert&#39;vc.30" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.18" steps="171"/></proof>
  </goal>
  <goal name="insert&#39;vc.31" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="46"/></proof>
  </goal>
  <goal name="insert&#39;vc.32" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.17" steps="174"/></proof>
  </goal>
  <goal name="insert&#39;vc.33" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.09" steps="50"/></proof>
  </goal>
  <goal name="insert&#39;vc.34" expl="precondition" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="52"/></proof>
  </goal>
  <goal name="insert&#39;vc.35" expl="assertion" proved="true">
  <proof prover="6"><result status="valid" time="0.05" steps="44"/></proof>
  </goal>
  <goal name="insert&#39;vc.36" expl="type invariant" proved="true">
  <proof prover="6"><result status="valid" time="0.08" steps="49"/></proof>
  </goal>
  <goal name="insert&#39;vc.37" expl="type invariant" proved="true">
  <proof prover="6"><result status="valid" time="0.24" steps="331"/></proof>
  </goal>
  <goal name="insert&#39;vc.38" expl="type invariant" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="47"/></proof>
  </goal>
  <goal name="insert&#39;vc.39" expl="postcondition" proved="true">
  <proof prover="6"><result status="valid" time="0.04" steps="49"/></proof>
  </goal>
 </transf>
 </goal>
</theory>
<theory name="Correct" proved="true">
 <goal name="Sig.Make.X.is_pre_order" proved="true">
 <proof prover="6"><result status="valid" time="0.02" steps="12"/></proof>
 </goal>
 <goal name="Sig.Make.X.compare&#39;vc" expl="VC for compare" proved="true">
 <proof prover="6"><result status="valid" time="0.03" steps="12"/></proof>
 </goal>
 <goal name="Sig.Make.heap&#39;vc" expl="VC for heap" proved="true">
 <proof prover="6"><result status="valid" time="0.04" steps="46"/></proof>
 </goal>
 <goal name="Sig.Make.create&#39;vc" expl="VC for create" proved="true">
 <proof prover="6"><result status="valid" time="0.04" steps="18"/></proof>
 </goal>
 <goal name="Sig.Make.is_empty&#39;vc" expl="VC for is_empty" proved="true">
 <proof prover="6"><result status="valid" time="0.03" steps="12"/></proof>
 </goal>
 <goal name="Sig.Make.size&#39;vc" expl="VC for size" proved="true">
 <proof prover="6"><result status="valid" time="0.02" steps="12"/></proof>
 </goal>
 <goal name="Sig.Make.min_def" proved="true">
 <proof prover="6"><result status="valid" time="0.04" steps="108"/></proof>
 </goal>
 <goal name="Sig.Make.find_min&#39;vc" expl="VC for find_min" proved="true">
 <proof prover="6"><result status="valid" time="0.04" steps="117"/></proof>
 </goal>
 <goal name="Sig.Make.find_min_exn&#39;vc" expl="VC for find_min_exn" proved="true">
 <proof prover="6"><result status="valid" time="0.03" steps="12"/></proof>
 </goal>
 <goal name="Sig.Make.delete_min_exn&#39;vc" expl="VC for delete_min_exn" proved="true">
 <proof prover="6"><result status="valid" time="0.02" steps="12"/></proof>
 </goal>
 <goal name="Sig.Make.extract_min_exn&#39;vc" expl="VC for extract_min_exn" proved="true">
 <proof prover="6"><result status="valid" time="0.03" steps="20"/></proof>
 </goal>
 <goal name="Sig.Make.insert&#39;vc" expl="VC for insert" proved="true">
 <proof prover="6"><result status="valid" time="0.01" steps="22"/></proof>
 </goal>
</theory>
</file>
</why3session>
